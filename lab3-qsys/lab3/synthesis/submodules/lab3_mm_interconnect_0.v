// lab3_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module lab3_mm_interconnect_0 (
		input  wire [11:0]   hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]   hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]    hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]    hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]    hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]    hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]    hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]    hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire          hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire          hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0]   hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0]   hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]    hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire          hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire          hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire          hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0]   hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]    hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire          hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire          hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0]   hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0]   hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]    hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]    hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]    hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]    hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]    hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]    hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire          hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire          hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0]   hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0]   hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]    hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire          hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire          hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire          hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire          clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire          hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire          master_0_clk_reset_reset_bridge_in_reset_reset,                      //                      master_0_clk_reset_reset_bridge_in_reset.reset
		input  wire          PLazer_0_reset_sink_reset_bridge_in_reset_reset,                     //                     PLazer_0_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0]   master_0_master_address,                                             //                                               master_0_master.address
		output wire          master_0_master_waitrequest,                                         //                                                              .waitrequest
		input  wire [3:0]    master_0_master_byteenable,                                          //                                                              .byteenable
		input  wire          master_0_master_read,                                                //                                                              .read
		output wire [31:0]   master_0_master_readdata,                                            //                                                              .readdata
		output wire          master_0_master_readdatavalid,                                       //                                                              .readdatavalid
		input  wire          master_0_master_write,                                               //                                                              .write
		input  wire [31:0]   master_0_master_writedata,                                           //                                                              .writedata
		output wire [8:0]    PLazer_0_avalon_slave_0_address,                                     //                                       PLazer_0_avalon_slave_0.address
		output wire          PLazer_0_avalon_slave_0_write,                                       //                                                              .write
		output wire [1023:0] PLazer_0_avalon_slave_0_writedata,                                   //                                                              .writedata
		output wire          PLazer_0_avalon_slave_0_chipselect                                   //                                                              .chipselect
	);

	wire           rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire   [127:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire           rsp_mux_src_ready;                                                  // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire     [2:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire           rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire           rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire           rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire   [127:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire           rsp_mux_001_src_ready;                                              // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire     [2:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire           rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire           rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire           master_0_master_translator_avalon_universal_master_0_waitrequest;   // master_0_master_agent:av_waitrequest -> master_0_master_translator:uav_waitrequest
	wire    [31:0] master_0_master_translator_avalon_universal_master_0_readdata;      // master_0_master_agent:av_readdata -> master_0_master_translator:uav_readdata
	wire           master_0_master_translator_avalon_universal_master_0_debugaccess;   // master_0_master_translator:uav_debugaccess -> master_0_master_agent:av_debugaccess
	wire    [31:0] master_0_master_translator_avalon_universal_master_0_address;       // master_0_master_translator:uav_address -> master_0_master_agent:av_address
	wire           master_0_master_translator_avalon_universal_master_0_read;          // master_0_master_translator:uav_read -> master_0_master_agent:av_read
	wire     [3:0] master_0_master_translator_avalon_universal_master_0_byteenable;    // master_0_master_translator:uav_byteenable -> master_0_master_agent:av_byteenable
	wire           master_0_master_translator_avalon_universal_master_0_readdatavalid; // master_0_master_agent:av_readdatavalid -> master_0_master_translator:uav_readdatavalid
	wire           master_0_master_translator_avalon_universal_master_0_lock;          // master_0_master_translator:uav_lock -> master_0_master_agent:av_lock
	wire           master_0_master_translator_avalon_universal_master_0_write;         // master_0_master_translator:uav_write -> master_0_master_agent:av_write
	wire    [31:0] master_0_master_translator_avalon_universal_master_0_writedata;     // master_0_master_translator:uav_writedata -> master_0_master_agent:av_writedata
	wire     [2:0] master_0_master_translator_avalon_universal_master_0_burstcount;    // master_0_master_translator:uav_burstcount -> master_0_master_agent:av_burstcount
	wire           rsp_mux_002_src_valid;                                              // rsp_mux_002:src_valid -> master_0_master_agent:rp_valid
	wire   [127:0] rsp_mux_002_src_data;                                               // rsp_mux_002:src_data -> master_0_master_agent:rp_data
	wire           rsp_mux_002_src_ready;                                              // master_0_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire     [2:0] rsp_mux_002_src_channel;                                            // rsp_mux_002:src_channel -> master_0_master_agent:rp_channel
	wire           rsp_mux_002_src_startofpacket;                                      // rsp_mux_002:src_startofpacket -> master_0_master_agent:rp_startofpacket
	wire           rsp_mux_002_src_endofpacket;                                        // rsp_mux_002:src_endofpacket -> master_0_master_agent:rp_endofpacket
	wire  [1023:0] plazer_0_avalon_slave_0_agent_m0_readdata;                          // PLazer_0_avalon_slave_0_translator:uav_readdata -> PLazer_0_avalon_slave_0_agent:m0_readdata
	wire           plazer_0_avalon_slave_0_agent_m0_waitrequest;                       // PLazer_0_avalon_slave_0_translator:uav_waitrequest -> PLazer_0_avalon_slave_0_agent:m0_waitrequest
	wire           plazer_0_avalon_slave_0_agent_m0_debugaccess;                       // PLazer_0_avalon_slave_0_agent:m0_debugaccess -> PLazer_0_avalon_slave_0_translator:uav_debugaccess
	wire    [31:0] plazer_0_avalon_slave_0_agent_m0_address;                           // PLazer_0_avalon_slave_0_agent:m0_address -> PLazer_0_avalon_slave_0_translator:uav_address
	wire   [127:0] plazer_0_avalon_slave_0_agent_m0_byteenable;                        // PLazer_0_avalon_slave_0_agent:m0_byteenable -> PLazer_0_avalon_slave_0_translator:uav_byteenable
	wire           plazer_0_avalon_slave_0_agent_m0_read;                              // PLazer_0_avalon_slave_0_agent:m0_read -> PLazer_0_avalon_slave_0_translator:uav_read
	wire           plazer_0_avalon_slave_0_agent_m0_readdatavalid;                     // PLazer_0_avalon_slave_0_translator:uav_readdatavalid -> PLazer_0_avalon_slave_0_agent:m0_readdatavalid
	wire           plazer_0_avalon_slave_0_agent_m0_lock;                              // PLazer_0_avalon_slave_0_agent:m0_lock -> PLazer_0_avalon_slave_0_translator:uav_lock
	wire  [1023:0] plazer_0_avalon_slave_0_agent_m0_writedata;                         // PLazer_0_avalon_slave_0_agent:m0_writedata -> PLazer_0_avalon_slave_0_translator:uav_writedata
	wire           plazer_0_avalon_slave_0_agent_m0_write;                             // PLazer_0_avalon_slave_0_agent:m0_write -> PLazer_0_avalon_slave_0_translator:uav_write
	wire     [7:0] plazer_0_avalon_slave_0_agent_m0_burstcount;                        // PLazer_0_avalon_slave_0_agent:m0_burstcount -> PLazer_0_avalon_slave_0_translator:uav_burstcount
	wire           plazer_0_avalon_slave_0_agent_rf_source_valid;                      // PLazer_0_avalon_slave_0_agent:rf_source_valid -> PLazer_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [1244:0] plazer_0_avalon_slave_0_agent_rf_source_data;                       // PLazer_0_avalon_slave_0_agent:rf_source_data -> PLazer_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire           plazer_0_avalon_slave_0_agent_rf_source_ready;                      // PLazer_0_avalon_slave_0_agent_rsp_fifo:in_ready -> PLazer_0_avalon_slave_0_agent:rf_source_ready
	wire           plazer_0_avalon_slave_0_agent_rf_source_startofpacket;              // PLazer_0_avalon_slave_0_agent:rf_source_startofpacket -> PLazer_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire           plazer_0_avalon_slave_0_agent_rf_source_endofpacket;                // PLazer_0_avalon_slave_0_agent:rf_source_endofpacket -> PLazer_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire           plazer_0_avalon_slave_0_agent_rsp_fifo_out_valid;                   // PLazer_0_avalon_slave_0_agent_rsp_fifo:out_valid -> PLazer_0_avalon_slave_0_agent:rf_sink_valid
	wire  [1244:0] plazer_0_avalon_slave_0_agent_rsp_fifo_out_data;                    // PLazer_0_avalon_slave_0_agent_rsp_fifo:out_data -> PLazer_0_avalon_slave_0_agent:rf_sink_data
	wire           plazer_0_avalon_slave_0_agent_rsp_fifo_out_ready;                   // PLazer_0_avalon_slave_0_agent:rf_sink_ready -> PLazer_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire           plazer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;           // PLazer_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> PLazer_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire           plazer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;             // PLazer_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> PLazer_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire           plazer_0_avalon_slave_0_agent_rdata_fifo_src_valid;                 // PLazer_0_avalon_slave_0_agent:rdata_fifo_src_valid -> PLazer_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire  [1025:0] plazer_0_avalon_slave_0_agent_rdata_fifo_src_data;                  // PLazer_0_avalon_slave_0_agent:rdata_fifo_src_data -> PLazer_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire           plazer_0_avalon_slave_0_agent_rdata_fifo_src_ready;                 // PLazer_0_avalon_slave_0_agent_rdata_fifo:in_ready -> PLazer_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire           hps_0_h2f_lw_axi_master_agent_write_cp_valid;                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire   [127:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire           hps_0_h2f_lw_axi_master_agent_write_cp_ready;                       // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire           hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire           hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire           router_src_valid;                                                   // router:src_valid -> cmd_demux:sink_valid
	wire   [127:0] router_src_data;                                                    // router:src_data -> cmd_demux:sink_data
	wire           router_src_ready;                                                   // cmd_demux:sink_ready -> router:src_ready
	wire     [2:0] router_src_channel;                                                 // router:src_channel -> cmd_demux:sink_channel
	wire           router_src_startofpacket;                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire           router_src_endofpacket;                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire           hps_0_h2f_lw_axi_master_agent_read_cp_valid;                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire   [127:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire           hps_0_h2f_lw_axi_master_agent_read_cp_ready;                        // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire           hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire           hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire           router_001_src_valid;                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [127:0] router_001_src_data;                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire           router_001_src_ready;                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire     [2:0] router_001_src_channel;                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire           router_001_src_startofpacket;                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire           router_001_src_endofpacket;                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire           master_0_master_agent_cp_valid;                                     // master_0_master_agent:cp_valid -> router_002:sink_valid
	wire   [127:0] master_0_master_agent_cp_data;                                      // master_0_master_agent:cp_data -> router_002:sink_data
	wire           master_0_master_agent_cp_ready;                                     // router_002:sink_ready -> master_0_master_agent:cp_ready
	wire           master_0_master_agent_cp_startofpacket;                             // master_0_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire           master_0_master_agent_cp_endofpacket;                               // master_0_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire           router_002_src_valid;                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire   [127:0] router_002_src_data;                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire           router_002_src_ready;                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire     [2:0] router_002_src_channel;                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire           router_002_src_startofpacket;                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire           router_002_src_endofpacket;                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire           plazer_0_avalon_slave_0_agent_rp_valid;                             // PLazer_0_avalon_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [1243:0] plazer_0_avalon_slave_0_agent_rp_data;                              // PLazer_0_avalon_slave_0_agent:rp_data -> router_003:sink_data
	wire           plazer_0_avalon_slave_0_agent_rp_ready;                             // router_003:sink_ready -> PLazer_0_avalon_slave_0_agent:rp_ready
	wire           plazer_0_avalon_slave_0_agent_rp_startofpacket;                     // PLazer_0_avalon_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire           plazer_0_avalon_slave_0_agent_rp_endofpacket;                       // PLazer_0_avalon_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire           plazer_0_avalon_slave_0_burst_adapter_source0_valid;                // PLazer_0_avalon_slave_0_burst_adapter:source0_valid -> PLazer_0_avalon_slave_0_agent:cp_valid
	wire  [1243:0] plazer_0_avalon_slave_0_burst_adapter_source0_data;                 // PLazer_0_avalon_slave_0_burst_adapter:source0_data -> PLazer_0_avalon_slave_0_agent:cp_data
	wire           plazer_0_avalon_slave_0_burst_adapter_source0_ready;                // PLazer_0_avalon_slave_0_agent:cp_ready -> PLazer_0_avalon_slave_0_burst_adapter:source0_ready
	wire     [2:0] plazer_0_avalon_slave_0_burst_adapter_source0_channel;              // PLazer_0_avalon_slave_0_burst_adapter:source0_channel -> PLazer_0_avalon_slave_0_agent:cp_channel
	wire           plazer_0_avalon_slave_0_burst_adapter_source0_startofpacket;        // PLazer_0_avalon_slave_0_burst_adapter:source0_startofpacket -> PLazer_0_avalon_slave_0_agent:cp_startofpacket
	wire           plazer_0_avalon_slave_0_burst_adapter_source0_endofpacket;          // PLazer_0_avalon_slave_0_burst_adapter:source0_endofpacket -> PLazer_0_avalon_slave_0_agent:cp_endofpacket
	wire           cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [127:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire           cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire     [2:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire           cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire           cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire           cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire   [127:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire           cmd_demux_001_src0_ready;                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire     [2:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire           cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire           cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire           cmd_demux_002_src0_valid;                                           // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire   [127:0] cmd_demux_002_src0_data;                                            // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire           cmd_demux_002_src0_ready;                                           // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire     [2:0] cmd_demux_002_src0_channel;                                         // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire           cmd_demux_002_src0_startofpacket;                                   // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire           cmd_demux_002_src0_endofpacket;                                     // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire           rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [127:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire           rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire     [2:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire           rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire           rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire           rsp_demux_src1_valid;                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire   [127:0] rsp_demux_src1_data;                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire           rsp_demux_src1_ready;                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire     [2:0] rsp_demux_src1_channel;                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire           rsp_demux_src1_startofpacket;                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire           rsp_demux_src1_endofpacket;                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire           rsp_demux_src2_valid;                                               // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire   [127:0] rsp_demux_src2_data;                                                // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire           rsp_demux_src2_ready;                                               // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire     [2:0] rsp_demux_src2_channel;                                             // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire           rsp_demux_src2_startofpacket;                                       // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire           rsp_demux_src2_endofpacket;                                         // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire           router_003_src_valid;                                               // router_003:src_valid -> PLazer_0_avalon_slave_0_rsp_width_adapter:in_valid
	wire  [1243:0] router_003_src_data;                                                // router_003:src_data -> PLazer_0_avalon_slave_0_rsp_width_adapter:in_data
	wire           router_003_src_ready;                                               // PLazer_0_avalon_slave_0_rsp_width_adapter:in_ready -> router_003:src_ready
	wire     [2:0] router_003_src_channel;                                             // router_003:src_channel -> PLazer_0_avalon_slave_0_rsp_width_adapter:in_channel
	wire           router_003_src_startofpacket;                                       // router_003:src_startofpacket -> PLazer_0_avalon_slave_0_rsp_width_adapter:in_startofpacket
	wire           router_003_src_endofpacket;                                         // router_003:src_endofpacket -> PLazer_0_avalon_slave_0_rsp_width_adapter:in_endofpacket
	wire           plazer_0_avalon_slave_0_rsp_width_adapter_src_valid;                // PLazer_0_avalon_slave_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire   [127:0] plazer_0_avalon_slave_0_rsp_width_adapter_src_data;                 // PLazer_0_avalon_slave_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire           plazer_0_avalon_slave_0_rsp_width_adapter_src_ready;                // rsp_demux:sink_ready -> PLazer_0_avalon_slave_0_rsp_width_adapter:out_ready
	wire     [2:0] plazer_0_avalon_slave_0_rsp_width_adapter_src_channel;              // PLazer_0_avalon_slave_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire           plazer_0_avalon_slave_0_rsp_width_adapter_src_startofpacket;        // PLazer_0_avalon_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire           plazer_0_avalon_slave_0_rsp_width_adapter_src_endofpacket;          // PLazer_0_avalon_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire           cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> PLazer_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire   [127:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> PLazer_0_avalon_slave_0_cmd_width_adapter:in_data
	wire           cmd_mux_src_ready;                                                  // PLazer_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire     [2:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> PLazer_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire           cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> PLazer_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire           cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> PLazer_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire           plazer_0_avalon_slave_0_cmd_width_adapter_src_valid;                // PLazer_0_avalon_slave_0_cmd_width_adapter:out_valid -> PLazer_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [1243:0] plazer_0_avalon_slave_0_cmd_width_adapter_src_data;                 // PLazer_0_avalon_slave_0_cmd_width_adapter:out_data -> PLazer_0_avalon_slave_0_burst_adapter:sink0_data
	wire           plazer_0_avalon_slave_0_cmd_width_adapter_src_ready;                // PLazer_0_avalon_slave_0_burst_adapter:sink0_ready -> PLazer_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire     [2:0] plazer_0_avalon_slave_0_cmd_width_adapter_src_channel;              // PLazer_0_avalon_slave_0_cmd_width_adapter:out_channel -> PLazer_0_avalon_slave_0_burst_adapter:sink0_channel
	wire           plazer_0_avalon_slave_0_cmd_width_adapter_src_startofpacket;        // PLazer_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> PLazer_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire           plazer_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;          // PLazer_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> PLazer_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire           plazer_0_avalon_slave_0_agent_rdata_fifo_out_valid;                 // PLazer_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [1025:0] plazer_0_avalon_slave_0_agent_rdata_fifo_out_data;                  // PLazer_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire           plazer_0_avalon_slave_0_agent_rdata_fifo_out_ready;                 // avalon_st_adapter:in_0_ready -> PLazer_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire           avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> PLazer_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [1025:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> PLazer_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire           avalon_st_adapter_out_0_ready;                                      // PLazer_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire     [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> PLazer_0_avalon_slave_0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_0_master_translator (
		.clk                    (clk_0_clk_clk),                                                      //                       clk.clk
		.reset                  (PLazer_0_reset_sink_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (master_0_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (master_0_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (master_0_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (master_0_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (master_0_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (master_0_master_byteenable),                                         //                          .byteenable
		.av_read                (master_0_master_read),                                               //                          .read
		.av_readdata            (master_0_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (master_0_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (master_0_master_write),                                              //                          .write
		.av_writedata           (master_0_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (1024),
		.UAV_DATA_W                     (1024),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (128),
		.UAV_BYTEENABLE_W               (128),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (128),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) plazer_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clkclk.clk
		.reset                  (PLazer_0_reset_sink_reset_bridge_in_reset_reset),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        //                    reset.reset
		.uav_address            (plazer_0_avalon_slave_0_agent_m0_addressavalon_universal_slave_0.address
		.uav_burstcount         (plazer_0_avalon_slave_0_agent_m0_burstcountburstcount
		.uav_read               (plazer_0_avalon_slave_0_agent_m0_readread
		.uav_write              (plazer_0_avalon_slave_0_agent_m0_writewrite
		.uav_waitrequest        (plazer_0_avalon_slave_0_agent_m0_waitrequestwaitrequest
		.uav_readdatavalid      (plazer_0_avalon_slave_0_agent_m0_readdatavalidreaddatavalid
		.uav_byteenable         (plazer_0_avalon_slave_0_agent_m0_byteenablebyteenable
		.uav_readdata           (plazer_0_avalon_slave_0_agent_m0_readdatareaddata
		.uav_writedata          (plazer_0_avalon_slave_0_agent_m0_writedatawritedata
		.uav_lock               (plazer_0_avalon_slave_0_agent_m0_locklock
		.uav_debugaccess        (plazer_0_avalon_slave_0_agent_m0_debugaccess),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           //                         .debugaccess
		.av_address             (PLazer_0_avalon_slave_0_addressavalon_anti_slave_0.address
		.av_write               (PLazer_0_avalon_slave_0_writewrite
		.av_writedata           (PLazer_0_avalon_slave_0_writedatawritedata
		.av_chipselect          (PLazer_0_avalon_slave_0_chipselectchipselect
		.av_read                (),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       //              (terminated)
		.av_readdata            (1024'bterminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       //              (terminated)
		.av_beginbursttransferterminated)
		.av_burstcountterminated)
		.av_byteenableterminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   //              (terminated)
		.av_waitrequest         (1'bterminated)
		.av_writebyteenableterminated)
		.av_lockterminated)
		.av_clkenterminated)
		.uav_clken              (1'bterminated)
		.av_debugaccessterminated)
		.av_outputenableterminated)
		.uav_responseterminated)
		.av_response            (2'bterminated)
		.uav_writeresponsevalidterminated)
		.av_writeresponsevalid  (1'bterminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (100),
		.PKT_CACHE_H               (122),
		.PKT_CACHE_L               (119),
		.PKT_ADDR_SIDEBAND_H       (98),
		.PKT_ADDR_SIDEBAND_L       (98),
		.PKT_PROTECTION_H          (118),
		.PKT_PROTECTION_L          (116),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_BURST_TYPE_H          (97),
		.PKT_BURST_TYPE_L          (96),
		.PKT_RESPONSE_STATUS_L     (123),
		.PKT_RESPONSE_STATUS_H     (124),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (103),
		.PKT_THREAD_ID_H           (115),
		.PKT_THREAD_ID_L           (104),
		.PKT_QOS_L                 (101),
		.PKT_QOS_H                 (101),
		.PKT_ORI_BURST_SIZE_L      (125),
		.PKT_ORI_BURST_SIZE_H      (127),
		.PKT_DATA_SIDEBAND_H       (99),
		.PKT_DATA_SIDEBAND_L       (99),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                    //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                     //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                  //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                            //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                              //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                    //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                 //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                              //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                        //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                          //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (127),
		.PKT_ORI_BURST_SIZE_L      (125),
		.PKT_RESPONSE_STATUS_H     (124),
		.PKT_RESPONSE_STATUS_L     (123),
		.PKT_QOS_H                 (101),
		.PKT_QOS_L                 (101),
		.PKT_DATA_SIDEBAND_H       (99),
		.PKT_DATA_SIDEBAND_L       (99),
		.PKT_ADDR_SIDEBAND_H       (98),
		.PKT_ADDR_SIDEBAND_L       (98),
		.PKT_BURST_TYPE_H          (97),
		.PKT_BURST_TYPE_L          (96),
		.PKT_CACHE_H               (122),
		.PKT_CACHE_L               (119),
		.PKT_THREAD_ID_H           (115),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (118),
		.PKT_PROTECTION_L          (116),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_0_master_agent (
		.clk                   (clk_0_clk_clk),                                                      //       clk.clk
		.reset                 (PLazer_0_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (master_0_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (master_0_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (master_0_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (master_0_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (master_0_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (master_0_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (master_0_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (master_0_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (1243),
		.PKT_ORI_BURST_SIZE_L      (1241),
		.PKT_RESPONSE_STATUS_H     (1240),
		.PKT_RESPONSE_STATUS_L     (1239),
		.PKT_BURST_SIZE_H          (1211),
		.PKT_BURST_SIZE_L          (1209),
		.PKT_TRANS_LOCK            (1188),
		.PKT_BEGIN_BURST           (1216),
		.PKT_PROTECTION_H          (1234),
		.PKT_PROTECTION_L          (1232),
		.PKT_BURSTWRAP_H           (1208),
		.PKT_BURSTWRAP_L           (1202),
		.PKT_BYTE_CNT_H            (1201),
		.PKT_BYTE_CNT_L            (1190),
		.PKT_ADDR_H                (1183),
		.PKT_ADDR_L                (1152),
		.PKT_TRANS_COMPRESSED_READ (1184),
		.PKT_TRANS_POSTED          (1185),
		.PKT_TRANS_WRITE           (1186),
		.PKT_TRANS_READ            (1187),
		.PKT_DATA_H                (1023),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_SRC_ID_H              (1218),
		.PKT_SRC_ID_L              (1218),
		.PKT_DEST_ID_H             (1219),
		.PKT_DEST_ID_L             (1219),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (1244),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) plazer_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (PLazer_0_reset_sink_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (plazer_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (plazer_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (plazer_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (plazer_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (plazer_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (plazer_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (plazer_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (plazer_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (plazer_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (plazer_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (plazer_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (plazer_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (plazer_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (plazer_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (plazer_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (plazer_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (plazer_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (plazer_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (plazer_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (plazer_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (plazer_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (plazer_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (plazer_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (plazer_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (plazer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (plazer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (plazer_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (plazer_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (plazer_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (plazer_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (plazer_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (plazer_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (plazer_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (plazer_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (plazer_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (1245),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) plazer_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (PLazer_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (plazer_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (plazer_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (plazer_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (plazer_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (plazer_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (plazer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (plazer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (plazer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (plazer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (plazer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (1026),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) plazer_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (PLazer_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (plazer_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (plazer_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (plazer_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (plazer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (plazer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (plazer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	lab3_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	lab3_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	lab3_mm_interconnect_0_router router_002 (
		.sink_ready         (master_0_master_agent_cp_ready),                  //      sink.ready
		.sink_valid         (master_0_master_agent_cp_valid),                  //          .valid
		.sink_data          (master_0_master_agent_cp_data),                   //          .data
		.sink_startofpacket (master_0_master_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (master_0_master_agent_cp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (PLazer_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	lab3_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (plazer_0_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (plazer_0_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (plazer_0_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (plazer_0_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (plazer_0_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (PLazer_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (1183),
		.PKT_ADDR_L                (1152),
		.PKT_BEGIN_BURST           (1216),
		.PKT_BYTE_CNT_H            (1201),
		.PKT_BYTE_CNT_L            (1190),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_BURST_SIZE_H          (1211),
		.PKT_BURST_SIZE_L          (1209),
		.PKT_BURST_TYPE_H          (1213),
		.PKT_BURST_TYPE_L          (1212),
		.PKT_BURSTWRAP_H           (1208),
		.PKT_BURSTWRAP_L           (1202),
		.PKT_TRANS_COMPRESSED_READ (1184),
		.PKT_TRANS_WRITE           (1186),
		.PKT_TRANS_READ            (1187),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (1244),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (1197),
		.OUT_BURSTWRAP_H           (1208),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) plazer_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (PLazer_0_reset_sink_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (plazer_0_avalon_slave_0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (plazer_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (plazer_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (plazer_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (plazer_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (plazer_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (plazer_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (plazer_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (plazer_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (plazer_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (plazer_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (plazer_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	lab3_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                    //      sink.ready
		.sink_channel       (router_src_channel),                                                  //          .channel
		.sink_data          (router_src_data),                                                     //          .data
		.sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.sink_valid         (router_src_valid),                                                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //          .valid
		.src0_data          (cmd_demux_src0_data),                                                 //          .data
		.src0_channel       (cmd_demux_src0_channel),                                              //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                           //          .endofpacket
	);

	lab3_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                //      sink.ready
		.sink_channel       (router_001_src_channel),                                              //          .channel
		.sink_data          (router_001_src_data),                                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	lab3_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (PLazer_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //      sink.ready
		.sink_channel       (router_002_src_channel),                          //          .channel
		.sink_data          (router_002_src_data),                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                            //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                        //          .valid
		.src0_data          (cmd_demux_002_src0_data),                         //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                   //          .endofpacket
	);

	lab3_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (PLazer_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                        //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                      //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                         //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                   //          .endofpacket
	);

	lab3_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (PLazer_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (plazer_0_avalon_slave_0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (plazer_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (plazer_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (plazer_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (plazer_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (plazer_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                   //          .endofpacket
	);

	lab3_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                           //          .endofpacket
	);

	lab3_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                           //          .endofpacket
	);

	lab3_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (PLazer_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                           //          .valid
		.src_data            (rsp_mux_002_src_data),                            //          .data
		.src_channel         (rsp_mux_002_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                            //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                          //          .channel
		.sink0_data          (rsp_demux_src2_data),                             //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (1183),
		.IN_PKT_ADDR_L                 (1152),
		.IN_PKT_DATA_H                 (1023),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (1151),
		.IN_PKT_BYTEEN_L               (1024),
		.IN_PKT_BYTE_CNT_H             (1201),
		.IN_PKT_BYTE_CNT_L             (1190),
		.IN_PKT_TRANS_COMPRESSED_READ  (1184),
		.IN_PKT_TRANS_WRITE            (1186),
		.IN_PKT_BURSTWRAP_H            (1208),
		.IN_PKT_BURSTWRAP_L            (1202),
		.IN_PKT_BURST_SIZE_H           (1211),
		.IN_PKT_BURST_SIZE_L           (1209),
		.IN_PKT_RESPONSE_STATUS_H      (1240),
		.IN_PKT_RESPONSE_STATUS_L      (1239),
		.IN_PKT_TRANS_EXCLUSIVE        (1189),
		.IN_PKT_BURST_TYPE_H           (1213),
		.IN_PKT_BURST_TYPE_L           (1212),
		.IN_PKT_ORI_BURST_SIZE_L       (1241),
		.IN_PKT_ORI_BURST_SIZE_H       (1243),
		.IN_ST_DATA_W                  (1244),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (124),
		.OUT_PKT_RESPONSE_STATUS_L     (123),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (125),
		.OUT_PKT_ORI_BURST_SIZE_H      (127),
		.OUT_ST_DATA_W                 (128),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) plazer_0_avalon_slave_0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (PLazer_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (router_003_src_valid),                                        //      sink.valid
		.in_channel           (router_003_src_channel),                                      //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_003_src_ready),                                        //          .ready
		.in_data              (router_003_src_data),                                         //          .data
		.out_endofpacket      (plazer_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (plazer_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (plazer_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (plazer_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (plazer_0_avalon_slave_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (plazer_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (124),
		.IN_PKT_RESPONSE_STATUS_L      (123),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (125),
		.IN_PKT_ORI_BURST_SIZE_H       (127),
		.IN_ST_DATA_W                  (128),
		.OUT_PKT_ADDR_H                (1183),
		.OUT_PKT_ADDR_L                (1152),
		.OUT_PKT_DATA_H                (1023),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (1151),
		.OUT_PKT_BYTEEN_L              (1024),
		.OUT_PKT_BYTE_CNT_H            (1201),
		.OUT_PKT_BYTE_CNT_L            (1190),
		.OUT_PKT_TRANS_COMPRESSED_READ (1184),
		.OUT_PKT_BURST_SIZE_H          (1211),
		.OUT_PKT_BURST_SIZE_L          (1209),
		.OUT_PKT_RESPONSE_STATUS_H     (1240),
		.OUT_PKT_RESPONSE_STATUS_L     (1239),
		.OUT_PKT_TRANS_EXCLUSIVE       (1189),
		.OUT_PKT_BURST_TYPE_H          (1213),
		.OUT_PKT_BURST_TYPE_L          (1212),
		.OUT_PKT_ORI_BURST_SIZE_L      (1241),
		.OUT_PKT_ORI_BURST_SIZE_H      (1243),
		.OUT_ST_DATA_W                 (1244),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) plazer_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (PLazer_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                           //          .ready
		.in_data              (cmd_mux_src_data),                                            //          .data
		.out_endofpacket      (plazer_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (plazer_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (plazer_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (plazer_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (plazer_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (plazer_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	lab3_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (1026),
		.inUsePackets    (0),
		.inDataWidth     (1026),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (1026),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (PLazer_0_reset_sink_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (plazer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (plazer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (plazer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

endmodule
